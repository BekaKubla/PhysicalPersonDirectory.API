// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhysiscalPersonDirectory.Infrastructure.Persistence.Context;

#nullable disable

namespace PhysiscalPersonDirectory.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(PersonDbContext))]
    [Migration("20240318082815_AddRelationPersonSeedData")]
    partial class AddRelationPersonSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhysiscalPersonDirectory.Domain.Entities.CityAggregate.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cities", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = false,
                            Name = "Kutaisi"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = false,
                            Name = "Tbilisi"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = false,
                            Name = "Batumi"
                        });
                });

            modelBuilder.Entity("PhysiscalPersonDirectory.Domain.Entities.PersonAggregate.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonalNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Lastname");

                    b.HasIndex("Name");

                    b.HasIndex("PersonalNumber");

                    b.ToTable("People", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1999, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 2,
                            Image = "",
                            IsActive = false,
                            Lastname = "Solis",
                            Name = "Oliver",
                            PersonalNumber = "60001138372"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1999, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Image = "",
                            IsActive = false,
                            Lastname = "Rodriguez",
                            Name = "Joan",
                            PersonalNumber = "60001138373"
                        });
                });

            modelBuilder.Entity("PhysiscalPersonDirectory.Domain.Entities.PersonAggregate.RelationPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedPersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RelatedPersonId");

                    b.ToTable("RelationPeople", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactType = 1,
                            IsActive = false,
                            PersonId = 1,
                            RelatedPersonId = 2
                        });
                });

            modelBuilder.Entity("PhysiscalPersonDirectory.Domain.Entities.PhoneNumberAggregate.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PhoneNumbers", "dbo");
                });

            modelBuilder.Entity("PhysiscalPersonDirectory.Domain.Entities.PersonAggregate.Person", b =>
                {
                    b.HasOne("PhysiscalPersonDirectory.Domain.Entities.CityAggregate.City", "City")
                        .WithMany("Persons")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("City");
                });

            modelBuilder.Entity("PhysiscalPersonDirectory.Domain.Entities.PersonAggregate.RelationPerson", b =>
                {
                    b.HasOne("PhysiscalPersonDirectory.Domain.Entities.PersonAggregate.Person", "Person")
                        .WithMany("Relationship")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhysiscalPersonDirectory.Domain.Entities.PersonAggregate.Person", "RelatedPerson")
                        .WithMany("RelatedTo")
                        .HasForeignKey("RelatedPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("RelatedPerson");
                });

            modelBuilder.Entity("PhysiscalPersonDirectory.Domain.Entities.PhoneNumberAggregate.PhoneNumber", b =>
                {
                    b.HasOne("PhysiscalPersonDirectory.Domain.Entities.PersonAggregate.Person", "Person")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PhysiscalPersonDirectory.Domain.Entities.CityAggregate.City", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("PhysiscalPersonDirectory.Domain.Entities.PersonAggregate.Person", b =>
                {
                    b.Navigation("PhoneNumbers");

                    b.Navigation("RelatedTo");

                    b.Navigation("Relationship");
                });
#pragma warning restore 612, 618
        }
    }
}
